{"version":3,"sources":["MDPreviewer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MDPreviewer","props","textInput","marked","logo","handleChange","react_default","a","createElement","className","src","alt","id","onChange","name","value","dangerouslySetInnerHTML","__html","require","defaultText","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","_event$target","target","setState","defineProperty","src_MDPreviewer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mSA8BeA,MA3Bf,SAAqBC,GAAO,IACnBC,EAAyCD,EAAzCC,UAAWC,EAA8BF,EAA9BE,OAAQC,EAAsBH,EAAtBG,KAAMC,EAAgBJ,EAAhBI,aAE9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAKN,EAAMK,UAAU,WAAWE,IAAI,SACzCL,EAAAC,EAAAC,cAAA,MAAII,GAAG,SAAP,6BAGFN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,UACAH,EAAAC,EAAAC,cAAA,YACII,GAAG,SACHC,SAAUR,EACVS,KAAK,YACLC,MAAOb,IAEnBI,EAAAC,EAAAC,cAAA,WAASF,EAAAC,EAAAC,cAAA,WAEDF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,WACAH,EAAAC,EAAAC,cAAA,OAAKI,GAAG,UAAUI,wBAA2B,CAACC,OAAQd,EAAOD,QCnBjEC,EAASe,EAAQ,IACfC,EAAW,otCAiDFC,cA1Bb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACX1B,UAAWiB,GAEbE,EAAKhB,aAAegB,EAAKhB,aAAawB,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KALTA,4EAQAU,GAAO,IAAAC,EACGD,EAAME,OAApBnB,EADWkB,EACXlB,KAAKC,EADMiB,EACNjB,MACZS,KAAKU,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GACGR,EAAQC,qCAIX,OACAT,EAAAC,EAAAC,cAAC4B,EAAD,CACE/B,aAAcmB,KAAKnB,aACnBF,OAAQA,EACRD,UAAWsB,KAAKI,MAAM1B,UACtBE,KAAMA,aArBMiC,aCfEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a66593d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction MDPreviewer(props) {\r\n    let {textInput, marked, logo, handleChange} = props\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 id='title'>React Markdown Previewer</h1>\r\n        </header>\r\n        \r\n        <h3 className='subtitle1'>Editor</h3>\r\n        <textarea \r\n            id='editor' \r\n            onChange={handleChange} \r\n            name='textInput' \r\n            value={textInput} \r\n        />\r\n<br></br><br></br>\r\n\r\n        <h3 className='subtitle2'>Preview</h3>\r\n        <div id='preview' dangerouslySetInnerHTML = {{__html: marked(textInput)}}>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MDPreviewer","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MDPreviewer from './MDPreviewer'\nlet marked = require('marked')\nconst defaultText = \n` <h1 style=\"text-decoration: underline; color: white; text-align: center\">Welcome to Project #2</h1>\n  <h2>Description</h2>\n  <blockquote>This is the 2nd project in a line of 5 React projects <a href=\"https://learn.freecodecamp.org/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer/\">\nfreeCodeCamp</a> has you build in order to earn the Front End Libraries Certification. This project runs on: \n  <ul>\n    <li>the <a href=\"https://reactjs.org/\">React.js framework</a></li>\n    <li>the <a href=\"https://marked.js.org/#/README.md#README.md\">Marked.js library</a></li>\n  </ul>\n  <br></br> \n  <h2>Marked.js</h2> Marked.js is used to turn whatever HTML you type <strong>here</strong> into HTML down \n  <strong>there</strong>.</blockquote>\n  <code>\n    <p>You can use code blocks like this one, too, if that's not too meta.</p>\n    <ol>\n      <li>Anything goes as long as it's HTML or inline styling</li>\n      <li>Literally.</li>\n      <li style=\"color: red; font-size: 125%\">Anything.</li>\n  </code>\n  <img src=\"./static/media/logo.5d5d9eef.svg\" style=\"height: 50%; width: 50%; margin-left: 25%\"/>\n  <pre><strong><p style=\"margin-left: 33%; font-size: 200%\">Happy coding!</p></strong></pre>`\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      textInput: defaultText\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n  \n  handleChange(event) {\n    const {name,value} = event.target\n    this.setState({\n      [name]: (value)\n    })\n  }\n  render() {\n    return(\n    <MDPreviewer \n      handleChange={this.handleChange} \n      marked={marked} \n      textInput={this.state.textInput} \n      logo={logo}\n    />\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}